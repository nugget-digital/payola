AWSTemplateFormatVersion: 2010-09-09
Description: Payola API Stack

Metadata:
  AWS::Cloudformation::Interface:
    ParameterGroups:
      - Label:
          default: Meta
        Parameters:
          - Environment
      - Label:
          default: Storage
        Parameters:
          - BucketName
      - Label:
          default: API
        Parameters:
          - FunctionMemorySize
          - FunctionTimeOut
          - LayerName

Parameters:
  Environment:
    Description: Environment name - test/prod
    AllowedPattern: "^(test|prod)$"
    Type: String

  BucketName:
    Description: S3 bucket name
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]+[a-z0-9]+$"
    Type: String

  FunctionMemorySize:
    Description: how many megabytes of ram to allocate for the lambda
    Type: Number
    Default: 128

  FunctionTimeOut:
    Description: Lambda timeout in seconds
    Type: Number
    Default: 3

  LayerName:
    Description:
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]+[a-z0-9]+$"
    Type: String

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: payola:name
          Value: !Sub ${BucketName}-${Environment}
      BucketName: !Sub ${BucketName}-${Environment}

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaGetPutObject
            Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${Bucket}/*

          - Sid: AllowLambdaListBucket
            Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action:
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${Bucket}/*

  PayolaRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::Stackname}-restapi-${Environment}
      Tags:
        - Key: "payola:name"
          Value: !Sub ${AWS::Stackname}-restapi-${Environment}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Prinipal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
    Policies:
      - PolicyName: LambdaExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
            # TODO: narrow down permissions with a lambda exec role for every handler
              Action:
                - dynamodb:*

  CreateLambdaLayer:
    Type: AWS::Lambda:LayerVersion
    Properties:
      CompatibleRuntimes:
        - provided
      Content:
        S3Bucket: !Ref Bucket
        S3Key: runtime.zip
      LayerName: ...
      Description: Dependencies for each lambda function
# TODO: create a seperate lambda layer for devices config?
  CreateClaimLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: provided
      Handler: lib.create_claim
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout
      Layers:
        - !Ref CreateLambdaLayer

  GetClaimStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: provided
      Handler: lib.get_claim_status
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout
      Layers:
        - !Ref CreateLambdaLayer

  UpdateClaimLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: provided
      Handler: lib.update_claim
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout
      Layers:
        - !Ref CreateLambdaLayer

  StoreClaimLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: provided
      Handler: lib.store_claim
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout
      Layers:
        - !Ref CreateLambdaLayer

  GetBalanceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: provided
      Handler: lib.get_balance
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout
      Layers:
        - !Ref CreateLambdaLayer

  GetConfigLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: provided
      Handler: lib.get_config
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout
