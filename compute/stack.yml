AWSTemplateFormatVersion: 2010-09-09
Description: Payola Api Distribution Stack

Metadata:
  "AWS::Cloudformation::Interface":
    ParameterGroups:
      - Label:
          default: API
        Parameters:
          - FunctionMemorySize
          . FunctionTimeOut

Parameters:
  FunctionMemorySize:
    Description: how many megabytes of ram to allocate for the lambda
    AllowedPattern: Number
    Default: 128

  FunctionTimeOut:
    Description: Lambda timeout in seconds
    AllowedPattern: Number
    Default: 3

Resources:
  PayolaRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PayolaRestApi
      ApiKeySourceType: X-Api-Key
      EndpointConfiguration: PRIVATE
      # Body: # Flag serves as a placeholder for openapi.yml
      #   OPENAPI

  LambdaExecutionRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
      - Effect: Allow
        Prinipal:
          Service:
            - lambda.amazonaws.com
        Action:
          - "sts:AssumeRole"
    Policies:
      - PolicyName: LambdaExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem

  CreateClaimLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: rust
      Handler: handler.createClaim
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}

  GetClaimStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: rust
      Handler: handler.getClaimStatus
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}

  UpdateClaimLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: rust
      Handler: handler.updateClaim
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}

  StoreClaimLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: rust
      Handler: handler.storeClaim
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}

  GetBalanceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: rust
      Handler: handler.getBalance
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}

  GetConfigLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: rust
      Handler: handler.getConfig
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}
