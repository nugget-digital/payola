AWSTemplateFormatVersion: 2010-09-09
Description: Payola API Stack

Metadata:
  "AWS::Cloudformation::Interface":
    ParameterGroups:
      - Label:
          default: Meta
        Parameters:
          - Environment
      - Label:
          default: CDN
        Parameters:
          - DefaultRootObject
          - DefaultTTL
          - MaxTTL
          - MinTTL
      - Label:
          default: Storage
        Parameters:
          - BucketName
      - Label:
          default: API
        Parameters:
          - FunctionLogRetentionInDays
          - FunctionMemorySize
          - FunctionTimeOut
          - GetBalanceHandlerName

Parameters:
  Environment:
    Description: Environment name - test/prod
    AllowedPattern: "^(test|prod)$"
    Type: String

  BucketName:
    Description: S3 bucket name
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]+[a-z0-9]+$"
    Type: String

  FunctionMemorySize:
    Description: how many megabytes of ram to allocate for the lambda
    Type: Number
    Default: 128

  FunctionTimeOut:
    Description: Lambda timeout in seconds
    Type: Number
    Default: 3

  DefaultTTL:
    Description: Default cache object TTL - default 1h
    Type: Number
    Default: 3600

  MaxTTL:
    Description: Maximum cache object TTL - default 2h
    Type: Number
    Default: 7200

  MinTTL:
    Description: Minimum cache object TTL - default 1/2h
    Type: Number
    Default: 1800

  DefaultRootObject:
    Description: Default root object path used by the CloudFront distribution
    AllowedPattern: "^[a-zA-Z0-9_-]+\\.html$"
    Type: String
    Default: index.html

  FunctionLogRetentionInDays:
    Description: Lambda log retention in days
    Type: Number
    Default: 7

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "payola:name"
          Value: !Sub ${BucketName}-${Environment}
      BucketName: !Sub ${BucketName}-${Environment}

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaGetPutObject
            Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${Bucket}/*

          - Sid: AllowLambdaListBucket
            Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action: s3:ListBucket
            Resource:
              - !GetAtt Bucket.Arn

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}-aaaa # required

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
        - Key: "payola:name"
          Value: !Sub ${AWS::StackName}-distribution
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: True
          DefaultTTL: !Ref DefaultTTL
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: False
          MaxTTL: !Ref MaxTTL
          MinTTL: !Ref MinTTL
          TargetOriginId: BucketOrigin # TODO ?
          ViewerProtocolPolicy: redirect-to-https # TODO ?
        DefaultRootObject: !Ref DefaultRootObject
        Enabled: True
        IPV6Enabled: False
        Origins:
          - DomainName: !GetAtt Bucket.DomainName
            Id: BucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        PriceClass: PriceClass_100

  PayolaRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::Stackname}-restapi-${Environment}
      Tags:
        - Key: "payola:name"
          Value: !Sub ${AWS::Stackname}-restapi-${Environment}

  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: !Sub ${AWS::StackName}-requestvalidator
      RestApiId: !Ref PayolaRestApi
      ValidateRequestBody: True
      ValidateRequestParameters: True

  BalanceResponseModel:
    Type: AWS::ApiGateway::Model
    Properties:
      Name: BalanceResponseModel
      RestApiId: !Ref PayolaRestApi
      ContentType: application/json
      # Schema:
      #   $schema: "http://json-schema.org/draft-04/schema#"
      #   type: object
      #   properties:
      #     id:
      #       type: string
      #     msisdn:
      #       type: string
      #     amount:
      #       type: number
      #     currency:
      #       type: string

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: CreateGetBalanceMethod
    Properties:
      RestApiId: !Ref PayolaRestApi
      StageName: !Ref Environment

  CreateGetBalanceMethod:
    Type: AWS::ApiGateway::Method
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref BasicAuthorizer
      HttpMethod: GET
      RequestParameters:
        method.request.header.content-type: True
        method.request.body.id: True
      RequestValidatorId: !Ref RequestValidator
      Integration:
        Type: AWS_PROXY
        IntegrationMethod: GET
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt GetBalanceHandler.Arn
      MethodResponses:
        - ResponseModels:
            "application/json": !Ref BalanceResponseModel
        - StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "401"
        - StatusCode: "500"
      ResourceId: !Ref Resource
      RestApiId: !Ref PayolaRestApi

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Prinipal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: LambdaExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
            # TODO: narrow down permissions with a lambda exec role for every handler
              Action:
                - dynamodb:*

  GetBalanceHandler:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "payola:name"
          Value: !Ref GetBalanceHandlerName
      Code:
        S3Bucket: !Ref BucketName # TODO Bucket of bundle
        S3Key: !Sub ${GetBalanceHandlerName}.zip
      Runtime: go1.x
      Handler: main
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout

  #
  # CreateCreateClaimMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     AuthorizationType: CUSTOM
  #     AuthorizerId: !Ref BasicAuthorizer # TODO
  #     HttpMethod: POST
  #     RequestParameters:
  #       method.request.header.content-type: True
  #       method.request.body.id: True
  #     RequestValidatorId: !Ref RequestValidator # TODO
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationMethod: POST
  #       Uri: !Sub
  #         - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
  #         - LambdaArn: !GetAtt CreateClaimHandler.Arn
  #     MethodResponses:
  #       - StatusCode: "202"
  #       - StatusCode: "400"
  #       - StatusCode: "401"
  #       - StatusCode: "500"
  #     ResourceId: !Ref Resource # TODO
  #     RestApiId: !Ref PayolaRestApi
  #
  # CreateGetClaimStatusMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     AuthorizationType: CUSTOM
  #     AuthorizerId: !Ref BasicAuthorizer # TODO
  #     HttpMethod: HEAD
  #     RequestParameters:
  #       method.request.header.content-type: True
  #       method.request.body.id: True
  #     RequestValidatorId: !Ref RequestValidator # TODO
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationMethod: HEAD
  #       Uri: !Sub
  #         - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
  #         - LambdaArn: !GetAtt GetClaimStatusHandler.Arn
  #     MethodResponses:
  #       - StatusCode: "102"
  #       - StatusCode: "200"
  #       - StatusCode: "400"
  #       - StatusCode: "401"
  #       - StatusCode: "402"
  #       - StatusCode: "404"
  #       - StatusCode: "500"
  #     ResourceId: !Ref Resource # TODO
  #     RestApiId: !Ref PayolaRestApi
  #
  # CreateUpdateClaimMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     AuthorizationType: CUSTOM
  #     AuthorizerId: !Ref BasicAuthorizer # TODO
  #     HttpMethod: PUT
  #     RequestParameters:
  #       method.request.header.content-type: True
  #       method.request.body.id: True
  #       method.request.body.msisdn: True
  #       method.request.body.amount: True
  #       method.request.body.currency: True
  #     RequestValidatorId: !Ref RequestValidator # TODO
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationMethod: PUT
  #       Uri: !Sub
  #         - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
  #         - LambdaArn: !GetAtt UpdateClaimHandler.Arn
  #     MethodResponses:
  #       - StatusCode: "201"
  #       - StatusCode: "400"
  #       - StatusCode: "401"
  #       - StatusCode: "404"
  #       - StatusCode: "500"
  #     ResourceId: !Ref Resource # TODO
  #     RestApiId: !Ref PayolaRestApi
  #
  # CreateStoreClaimethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     AuthorizationType: CUSTOM
  #     AuthorizerId: !Ref BasicAuthorizer # TODO
  #     HttpMethod: POST
  #     RequestParameters:
  #       method.request.header.content-type: True
  #       method.request.body.id: True
  #       method.request.body.msisdn: True
  #       method.request.body.amount: True
  #       method.request.body.currency: True
  #     RequestValidatorId: !Ref RequestValidator # TODO
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationMethod: POST
  #       Uri: !Sub
  #         - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
  #         - LambdaArn: !GetAtt StoreClaimHandler.Arn
  #     MethodResponses:
  #       - StatusCode: "201"
  #       - StatusCode: "400"
  #       - StatusCode: "401"
  #       - StatusCode: "404"
  #       - StatusCode: "500"
  #     ResourceId: !Ref Resource # TODO
  #     RestApiId: !Ref PayolaRestApi
  # GetConfigMethod:
  #   Type: AWS::ApiGateway::Method
  #     AuthorizationType: CUSTOM
  #     AuthorizerId: !Ref BasicAuthorizer # TODO
  #     HttpMethod: GET
  #     RequestParameters:
  #       method.request.header.content-type: True
  #     RequestValidatorId: !Ref RequestValidator # TODO
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationMethod: GET
  #       Uri: !Sub
  #         - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
  #         - LambdaArn: !GetAtt GetConfigHandler.Arn
  #     MethodResponses:
  #       - ResponseModels:
  #           "application/json": # TODO
  #       - StatusCode: "200"
  #       - StatusCode: "400"
  #       - StatusCode: "401"
  #       - StatusCode: "404"
  #       - StatusCode: "500"
  #     ResourceId: !Ref Resource # TODO
  #     RestApiId: !Ref PayolaRestApi

  #
  # CreateClaimHandler:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Runtime: go1.x
  #     Handler: lib.create_claim
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     MemorySize: !Ref FunctionMemorySize
  #     Timeout: !Ref FunctionTimeout
  #
  # GetClaimStatusHandler:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Runtime: go1.x
  #     Handler: lib.get_claim_status
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     MemorySize: !Ref FunctionMemorySize
  #     Timeout: !Ref FunctionTimeout
  #
  # UpdateClaimHandler:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Runtime: go1.x
  #     Handler: lib.update_claim
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     MemorySize: !Ref FunctionMemorySize
  #     Timeout: !Ref FunctionTimeout
  #
  # StoreClaimHandler:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Runtime: go1.x
  #     Handler: lib.store_claim
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     MemorySize: !Ref FunctionMemorySize
  #     Timeout: !Ref FunctionTimeout
  #
  # GetConfigHandler:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Runtime: provided
  #     Handler: lib.get_config
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     MemorySize: !Ref FunctionMemorySize
  #     Timeout: !Ref FunctionTimeout
